package com.dynamictecnologies.notificationmanager.util

import android.app.AlertDialog
import android.content.Context
import android.content.Intent
import android.provider.Settings
import android.util.Log
import com.dynamictecnologies.notificationmanager.service.NotificationListenerService

object PermissionHelper {
    private const val TAG = "PermissionHelper"

    /**
     * Verifica si los permisos de NotificationListener est√°n activos
     */
    fun hasNotificationListenerPermission(context: Context): Boolean {
        return NotificationListenerService.isNotificationListenerEnabled(context)
    }

    /**
     * Muestra di√°logo para solicitar permisos de NotificationListener
     */
    fun showNotificationPermissionDialog(context: Context) {
        try {
            AlertDialog.Builder(context)
                .setTitle("üîî Permisos necesarios")
                .setMessage(
                    "Para recolectar notificaciones, esta aplicaci√≥n necesita acceso especial.\n\n" +
                            "üì± **Pasos a seguir:**\n" +
                            "1. Toca 'Ir a configuraci√≥n'\n" +
                            "2. Busca 'Notification Manager' en la lista\n" +
                            "3. Activa el interruptor junto al nombre\n" +
                            "4. Toca 'Permitir' en el di√°logo de confirmaci√≥n\n" +
                            "5. Regresa a la app\n\n" +
                            "‚ö†Ô∏è **Sin estos permisos NO se pueden recolectar notificaciones**"
                )
                .setPositiveButton("Ir a configuraci√≥n") { _, _ ->
                    openNotificationListenerSettings(context)
                }
                .setNegativeButton("M√°s tarde") { dialog, _ ->
                    dialog.dismiss()
                    Log.d(TAG, "Usuario pospuso configuraci√≥n de permisos")
                }
                .setCancelable(false)
                .show()

            Log.d(TAG, "üì± Di√°logo de permisos mostrado")
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Error mostrando di√°logo: ${e.message}")
        }
    }

    /**
     * Abre la configuraci√≥n de acceso a notificaciones
     */
    fun openNotificationListenerSettings(context: Context) {
        try {
            val intent = Intent(Settings.ACTION_NOTIFICATION_LISTENER_SETTINGS)
            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
            context.startActivity(intent)
            Log.d(TAG, "‚úÖ Abriendo configuraci√≥n de NotificationListener")
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Error abriendo configuraci√≥n principal: ${e.message}")

            // Fallback: abrir configuraci√≥n general de seguridad
            try {
                val fallbackIntent = Intent(Settings.ACTION_SECURITY_SETTINGS)
                fallbackIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
                context.startActivity(fallbackIntent)
                Log.d(TAG, "‚úÖ Abriendo configuraci√≥n de seguridad como fallback")
            } catch (fallbackException: Exception) {
                Log.e(TAG, "‚ùå Error abriendo configuraci√≥n de seguridad: ${fallbackException.message}")

                // √öltimo fallback: configuraci√≥n general
                try {
                    val lastResortIntent = Intent(Settings.ACTION_SETTINGS)
                    lastResortIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
                    context.startActivity(lastResortIntent)
                    Log.d(TAG, "‚úÖ Abriendo configuraci√≥n general como √∫ltimo recurso")
                } catch (lastException: Exception) {
                    Log.e(TAG, "‚ùå Error cr√≠tico: No se puede abrir ninguna configuraci√≥n: ${lastException.message}")
                }
            }
        }
    }

    /**
     * Muestra instrucciones detalladas para encontrar la configuraci√≥n manualmente
     */
    fun showManualInstructions(context: Context) {
        try {
            AlertDialog.Builder(context)
                .setTitle("üîç Instrucciones manuales")
                .setMessage(
                    "Si no encuentras la configuraci√≥n autom√°ticamente:\n\n" +
                            "üì± **B√∫squeda manual:**\n" +
                            "1. Ve a 'Configuraci√≥n' de tu dispositivo\n" +
                            "2. Busca 'Aplicaciones' o 'Apps'\n" +
                            "3. Busca 'Acceso especial' o 'Permisos especiales'\n" +
                            "4. Busca 'Acceso de notificaciones' o 'Notification access'\n" +
                            "5. Encuentra 'Notification Manager'\n" +
                            "6. Activa el interruptor\n\n" +
                            "üìç **Ubicaciones comunes:**\n" +
                            "‚Ä¢ Configuraci√≥n ‚Üí Notificaciones ‚Üí Acceso de notificaciones\n" +
                            "‚Ä¢ Configuraci√≥n ‚Üí Seguridad ‚Üí Acceso de notificaciones\n" +
                            "‚Ä¢ Configuraci√≥n ‚Üí Aplicaciones ‚Üí Permisos especiales"
                )
                .setPositiveButton("Entendido", null)
                .show()

            Log.d(TAG, "üìñ Instrucciones manuales mostradas")
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Error mostrando instrucciones: ${e.message}")
        }
    }

    /**
     * Verifica el estado de permisos y registra informaci√≥n detallada
     */
    fun checkAndLogPermissionStatus(context: Context) {
        val hasPermissions = hasNotificationListenerPermission(context)

        if (hasPermissions) {
            Log.d(TAG, "‚úÖ Estado de permisos: ACTIVOS")
            Log.d(TAG, "üîî La app puede recolectar notificaciones")
        } else {
            Log.w(TAG, "‚ùå Estado de permisos: INACTIVOS")
            Log.w(TAG, "‚ö†Ô∏è La app NO puede recolectar notificaciones")
            Log.w(TAG, "üì± Es necesario otorgar permisos en: Configuraci√≥n ‚Üí Notificaciones ‚Üí Acceso de notificaciones")
        }

        // Log adicional para debugging
        try {
            val packageName = context.packageName
            val appName = context.packageManager.getApplicationLabel(context.applicationInfo)
            Log.d(TAG, "üì¶ Package: $packageName")
            Log.d(TAG, "üì± App name: $appName")
        } catch (e: Exception) {
            Log.e(TAG, "Error obteniendo info de la app: ${e.message}")
        }
    }

    /**
     * Crea un intent para mostrar el di√°logo de permisos
     */
    fun createPermissionRequestIntent(): Intent {
        return Intent("com.dynamictecnologies.notificationmanager.NEED_PERMISSIONS")
    }
}